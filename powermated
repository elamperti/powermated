#!/usr/bin/env python

from datetime import datetime
from subprocess import call
import ctypes
import sys

# @see input.h
EV_SYN = 0x00
EV_KEY = 0x01
EV_REL = 0x02

EV_TYPE_UP = 'UP'
EV_TYPE_DOWN = 'DOWN'

VOLUME_CMD = ['amixer', '-D', 'pulse', 'sset', 'Master', '1%']
MUTE_CMD = ['amixer', '-D', 'pulse', 'sset', 'Master', 'toggle']


def read_word(f):
    """
    Read a 32bit word and reverse it because of big endianes

    :param f: the file descriptor
    :return: the hex representation of the 32bit word
    :rtype : str
    """
    return f.read(4)[::-1].encode('hex')


def read_block(f):
    """
    Read a block of bytes representing an event

    :param f:  the file descriptor
    :return: the list of 6 words representing an event
    :rtype : str
    """
    return [
        read_word(f),
        read_word(f),
        read_word(f),
        read_word(f),
        read_word(f),
        read_word(f)
    ]


def run(device):

    """
    Monitor the given device and modify the sound volume

    :param device: the name of the device to read
    """
    with open(device) as f:
        while True:

            # first block
            first_block = read_block(f)

            # read the event timestamp
            ts = datetime.fromtimestamp(int(first_block[0], 16))

            # read the event identifier
            event_name = int(first_block[4][-2:], 16)

            # read the event modifier
            event_type = ctypes.c_int32(int(first_block[5], 16)).value

            # read the value associated to the current event
            event_value = None

            # event actions: mute
            if event_name == EV_KEY:

                if event_type > 0:
                    event_type = EV_TYPE_DOWN
                    call(MUTE_CMD)
                else:
                    event_type = EV_TYPE_UP

            # event actions: volume
            elif event_name == EV_REL:

                event_value = event_type
                cmd = VOLUME_CMD[:]

                if event_type > 0:
                    event_type = EV_TYPE_UP
                    cmd[-1] += '+'
                else:
                    event_type = EV_TYPE_DOWN
                    cmd[-1] += '-'

                call(cmd)

            event_name_desc = 'CLICK' if event_name == EV_KEY else 'ROTATION'
            event_value_desc = event_value if event_value is not None else ''

            print "%s %s %s %s" % (ts, event_name_desc, event_type, event_value_desc)

            # second block: ignored
            read_block(f)

if __name__ == "__main__":

    if len(sys.argv) < 2:
        print 'Usage: powermated <device>'
        sys.exit()

    run(sys.argv[1])
